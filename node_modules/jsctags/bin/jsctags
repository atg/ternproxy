#!/usr/bin/env node

var format = require('util').format;
var argv = require('optimist').argv;
var jsctags = require('../');
var path = require('path');
var collect = require('collect-stream');
var async = require('async');
var fs = require('fs');

var dir = (function () {
  if (argv.dir) {
    return path.resolve(argv.dir);
  }

  if (argv.file) {
    return path.dirname(argv.file);
  }

  if (argv._.length) {
    return path.dirname(argv._[0]);
  }

  return '///null';
})();

var file = (function () {
  if (argv.file) {
    return path.resolve(process.cwd(), argv.file);
  }

  if (argv._.length) {
    return argv._.map(function (file) {
      return path.resolve(process.cwd(), file);
    });
  }

  return format('///null/%s', Math.floor(Math.random() * 100));
})();

if (!argv._.length) {
  collect(process.stdin, function (err, content) {
    if (err) {
      throw err;
    }

    if (Buffer.isBuffer(content)) {
      content = content.toString();
    }

    jsctags({
      file: file,
      dir: dir,
      content: content
    }, function (err, tags) {
      if (err) {
        throw err;
      }

      tags.tagfile = file;
      tags.forEach(function (tag) {
        tag.tagfile = file;
      });

      if (argv.f) {
        console.log(jsctags.ctags(tags).join(''));
      } else {
        console.log(JSON.stringify(tags, null, 2));
      }
    });
  });
} else {
  var files = Array.isArray(file) ? file : [file];
  async.map(files, function (file, callback) {
    fs.readFile(file, 'utf8', function (err, content) {
      if (err) {
        return callback(err);
      }

      jsctags({
        file: file,
        dir: dir,
        content: content
      }, function (err, tags) {
        if (err) {
          throw err;
        }

        tags.tagfile = file;
        tags.forEach(function (tag) {
          tag.tagfile = file;
        });

        callback(null, tags);
      });
    });
  }, function (err, results) {
    if (err) {
      throw err;
    }

    if (argv.f) {
      var ctags = Array.prototype.concat.apply([], results.map(jsctags.ctags));
      console.log(ctags.join(''));
    } else {
      var tags = Array.prototype.concat.apply([], results);
      console.log(JSON.stringify(tags, null, 2));
    }
  });
}
