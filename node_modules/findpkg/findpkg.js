/*
 * Copyright (c) 2012 Frank Hellwig
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

var fs = require('fs');
var path = require('path');

function findPackageFile(filename) {
    var current = path.dirname(filename);
    var previous = null;
    while (current !== previous) {
        var pathname = path.join(current, 'package.json');
        if (fs.existsSync(pathname) && fs.statSync(pathname).isFile()) {
            return pathname;
        }
        previous = current;
        current = path.join(current, '..');
    }
    return null;
}

function checkModule(module) {
    if (module === null) {
        throw new TypeError('module is null');
    }
    if (typeof module === 'undefined') {
        throw new TypeError('module is undefined');
    }
    if (typeof module !== 'object') {
        throw new TypeError('module is not an object');
    }
    if (typeof module.filename !== 'string') {
        throw new TypeError('module filename is not a string');
    }
}

function getPackageInfo(module) {
    checkModule(module);
    var filename = module.filename;
    var pkginfo = {};
    var pathname = findPackageFile(filename);
    if (pathname) {
        pkginfo.found = true;
        pkginfo.name = JSON.parse(fs.readFileSync(pathname, 'utf8')).name;
        pkginfo.pathname = pathname;
    } else {
        pkginfo.found = false;
        pkginfo.name = path.basename(filename, path.extname(filename));
        pkginfo.pathname = filename;
    }
    pkginfo.dirname = path.dirname(pkginfo.pathname);
    pkginfo.resolve = function (filename) {
        if (typeof filename !== 'string') {
            throw new TypeError('filename is not a string');
        }
        if (filename.charAt(0) === '.') {
            return path.resolve(filename); // use cwd
        } else {
            return path.resolve(pkginfo.dirname, filename);
        }
    };
    return pkginfo;
}

module.exports = getPackageInfo;
